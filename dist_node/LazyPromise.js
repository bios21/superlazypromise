'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

var _module = null,
    _exports = null;
if (typeof module !== 'undefined' && module.exports) {
    _exports = module.exports;
    _module = {};
} else {
    _exports = window;
    _module = _exports;
}

((module, exports, root) => {
    var rawAsap = (() => {
        function _rawAsap(task) {
            if (!queue.length) {
                requestFlush();
                flushing = true;
            }

            queue[queue.length] = task;
        }

        var queue = [],
            flushing = false,
            requestFlush = null,
            index = 0,
            capacity = 1024;

        function flush() {
            while (index < queue.length) {
                var currentIndex = index;

                index = index + 1;
                queue[currentIndex].call();

                if (index > capacity) {
                    for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                        queue[scan] = queue[scan + index];
                    }
                    queue.length -= index;
                    index = 0;
                }
            }
            queue.length = 0;
            index = 0;
            flushing = false;
        }

        function makeRequestCallFromTimer(callback) {
            return function requestCall() {
                var timeoutHandle = setTimeout(handleTimer, 0);

                var intervalHandle = setInterval(handleTimer, 50);

                function handleTimer() {
                    clearTimeout(timeoutHandle);
                    clearInterval(intervalHandle);
                    callback();
                }
            };
        }

        _rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;

        const BrowserMutationObserver = root.MutationObserver || root.WebKitMutationObserver;

        if (typeof BrowserMutationObserver === 'function') {
            requestFlush = makeRequestCallFromMutationObserver(flush);
        } else {
            requestFlush = makeRequestCallFromTimer(flush);
        }

        _rawAsap.requestFlush = requestFlush;

        function makeRequestCallFromMutationObserver(callback) {
            var toggle = 1;
            var observer = new BrowserMutationObserver(callback);
            var node = document.createTextNode("");
            observer.observe(node, { characterData: true });
            return function requestCall() {
                toggle = -toggle;
                node.data = toggle;
            };
        }

        return _rawAsap;
    })();

    var asap = (() => {
        var freeTasks = [],
            pendingErrors = [];

        const requestErrorThrow = rawAsap.makeRequestCallFromTimer(() => {
            if (pendingErrors.length) {
                throw pendingErrors.shift();
            }
        });

        class RawTask {
            constructor() {
                this.task = null;
            }

            call() {
                try {
                    this.task.call();
                } catch (error) {
                    pendingErrors.push(error);
                    requestErrorThrow();
                } finally {
                    this.task = null;
                    freeTasks[freeTasks.length] = this;
                }
            }
        }

        function _asap(task) {
            let rawTask;
            if (freeTasks.length) {
                rawTask = freeTasks.pop();
            } else {
                rawTask = new RawTask();
            }
            rawTask.task = task;
            rawAsap(rawTask);
        }

        return _asap;
    })();

    class LazyPromise {

        static get rawAsap() {
            return rawAsap;
        }
        static get asap() {
            return asap;
        }

        constructor(fn) {
            if (typeof fn !== 'function') {
                throw new TypeError(`Bro' ... fn means function, not some shit like ${ typeof fn } you try to give. Tss`);
            }

            this.created = false;
            this.fn = fn;
            this.promise = null;
        }

        _createPromise() {
            this.promise = new Promise((resolve, reject) => {
                asap(() => {
                    try {
                        this.fn(resolve, reject);
                    } catch (e) {
                        reject(e);
                    }
                });
            });

            this.created = true;
        }

        updatePromise(promise) {
            if (!!promise && promise.__proto__.constructor.name === 'Promise') {
                this.promise = Promise.resolve(promise);
                this.created = true;
            }
        }

        then(onResolved, onRejected) {
            if (!this.created) this._createPromise();
            this.promise && this.promise.then(onResolved, onRejected);
            return this;
        }

        catch(onRejected) {
            if (!this.created) this._createPromise();
            this.promise && this.promise.catch(onRejected);
            return this;
        }

        kill() {
            this.promise = null;
        }
    }

    class SuperLazyPromise extends LazyPromise {
        constructor(fn) {
            super(fn);

            this.superLazyThenCatch = [];
        }

        then(onResolved, onRejected) {
            if (!this.created) {
                this.superLazyThenCatch.push([onResolved, onRejected]);
                return this;
            } else {
                return super.then(onResolved, onRejected);
            }
        }

        catch(onRejected) {
            if (!this.created) {
                if (onRejected && typeof onRejected === 'function') {
                    this.superLazyThenCatch.push(onRejected);
                }
                return this;
            } else {
                return super.catch(onRejected);
            }
        }

        awake(fn) {
            if (typeof fn === 'function') {
                this.fn = fn;
                this.created = false;
            }
            this.created || super._createPromise();
            for (let resRej of this.superLazyThenCatch) {
                if (typeof resRej === 'function') {
                    asap(() => {
                        this.catch(resRej);
                    });
                } else {
                    asap(() => {
                        this.then.apply(this, _toConsumableArray(resRej));
                    });
                }
            }
        }
    }

    exports.LazyPromise = LazyPromise;
    exports.SuperLazyPromise = SuperLazyPromise;
})(_module, _exports, typeof global !== 'undefined' ? global : window);
//# sourceMappingURL=data:application/json;base64,
